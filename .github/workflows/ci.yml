name: CI
on:
  pull_request:
  push:

jobs:
  # Do a quick check before proceeding to full tests
  check:
    name: Quick check
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: clippy, rustfmt

      - name: Install dependencies (Linux)
        run: sudo apt-get install libusb-1.0-0-dev libudev-dev

      - name: Exclude crates
        run: |
          # Example crates will fail to compile unless an appropriate target
          # triple is provided.
          sed -E -i.bak 's/.*basic_.*//' Cargo.toml
          sed -E -i.bak 's/.*smp_rp_pico.*//' Cargo.toml

      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace

      # TODO: Add something like <https://github.com/mbrobbel/rustfmt-check>,
      #       except for pushing commits automatically

  # Check crate metadata
  workspace:
    name: Check crate metadata
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies (Linux)
        run: sudo snap install deno

      - name: Check crate metadata
        run: deno run --allow-read scripts/check-workspace.ts

  # Build examples
  build-examples:
    name: Build examples
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: Add `macos-10.15`, which needs `arm-none-eabi-gcc`
        # TODO: Add `windows-2019`, which doesn't support `r3_port_std`
        os: [ubuntu-20.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install additional target of the Rust toolchain (Arm)
        run: |
          rustup target add thumbv6m-none-eabi thumbv7em-none-eabihf
          rustup target add armv7a-none-eabi

      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu-')
        run: sudo apt-get install gcc-arm-none-eabi

      - name: Build examples
        shell: bash
        run: |
          for d in examples/*; do
            echo "::group::$d"
            pushd $d
            cargo build --release
            popd
            echo "::endgroup::"
          done

  # Run tests on the host system
  test-hosted:
    name: Test
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: Add `macos-10.15` after addressing the time inaccuracy that
        #       causes some tests to fail
        os: [ubuntu-20.04, windows-2019]
        features: [all-features]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu-')
        run: sudo apt-get install libusb-1.0-0-dev libudev-dev

      - name: Exclude crates (Windows)
        if: startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          # `r3_port_std` doesn't support Windows yet
          sed -E -i.bak 's/.*r3_port_std.*//' Cargo.toml
          sed -E -i.bak 's/.*r3_port_std.*//' src/r3/Cargo.toml
          sed -E -i.bak 's/.*basic.*//' Cargo.toml

      - name: Exclude crates
        shell: bash
        run: |
          sed -E -i.bak 's/.*basic_.*//' Cargo.toml
          sed -E -i.bak 's/.*smp_rp_pico.*//' Cargo.toml

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace
        env:
          RUST_LOG: debug

  # Run tests on the host system with a subset of optional features enabled
  test-hosted-subset:
    name: Test
    needs: check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        features:
          - ""
          - priority_boost
          - system_time
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install dependencies (Linux)
        run: sudo apt-get install libusb-1.0-0-dev libudev-dev

      - name: Convert feature list to Cargo parameter
        run: |
          features='${{ matrix.features }}'
          if [ "$features" ]; then
            features="--features r3_test_suite/$features --features r3_kernel/$features"
          fi
          echo "features_param=$features" >> $GITHUB_ENV

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p r3_port_std --no-default-features ${{ env.features_param }}
        env:
          RUST_LOG: debug


  # Run tests on freestanding targets
  test-freestanding-arm:
    name: Test
    needs: check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # Arm RealView PBX for Cortex-A9, Armv7-A
          - { ty: arm, runner_target: qemu_realview_pbx_a9, runner_args: "" }
          # MPS2+ AN505, Armv8-M Mainline + FPU
          - { ty: arm, runner_target: qemu_mps2_an505, runner_args: "" }
          # MPS2+ AN505, Armv8-M Mainline
          - { ty: arm, runner_target: qemu_mps2_an505, runner_args: --arch cortex_m33 }
          # MPS2+ AN505, Armv8-M Baseline
          - { ty: arm, runner_target: qemu_mps2_an505, runner_args: --arch cortex_m23 }
          # MPS2+ AN505, Armv7-M + FPU + DSP
          - { ty: arm, runner_target: qemu_mps2_an505, runner_args: --arch cortex_m4f }
          # MPS2+ AN385, Armv7-M
          - { ty: arm, runner_target: qemu_mps2_an385, runner_args: "" }
          # MPS2+ AN385, Armv6-M
          - { ty: arm, runner_target: qemu_mps2_an385, runner_args: --arch cortex_m0 }

          # SiFive U, RV64GC
          - { ty: riscv, runner_target: qemu_sifive_u_rv64, runner_args: "" }
          # SiFive U, RV64IMAC
          - { ty: riscv, runner_target: qemu_sifive_u_rv64, runner_args: --arch rv64i+m+a+c }
          # SiFive U, RV64IMA
          - { ty: riscv, runner_target: qemu_sifive_u_rv64, runner_args: --arch rv64i+m+a }
          # SiFive U, RV32GC
          - { ty: riscv, runner_target: qemu_sifive_u_rv32, runner_args: "" }
          # SiFive E, RV32IMAC
          - { ty: riscv, runner_target: qemu_sifive_e_rv32, runner_args: "" }
          # SiFive E, RV32IA
          - { ty: riscv, runner_target: qemu_sifive_e_rv32, runner_args: --arch rv32i+a }
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rust-src

      - name: Install dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install libusb-1.0-0-dev libudev-dev

      - name: Cache QEMU's built binaries
        uses: actions/cache@v2
        with:
          path: ~/.qemu
          key: ${{ runner.os }}-ci-qemu-arm_riscv

      - name: Install QEMU 5.1.0 from source
        uses: ./.github/actions/install-qemu
        with:
          target-list: arm-softmmu,riscv32-softmmu,riscv64-softmmu

      - name: Install additional target of the Rust toolchain (Arm)
        if: matrix.ty == 'arm'
        run: |
          rustup target add thumbv6m-none-eabi thumbv7m-none-eabi thumbv7em-none-eabihf
          rustup target add thumbv8m.base-none-eabi thumbv8m.main-none-eabi thumbv8m.main-none-eabihf
          rustup target add armv7a-none-eabi

      - name: Install additional target of the Rust toolchain (RISC-V)
        if: matrix.ty == 'riscv'
        run: |
          rustup target add riscv32imac-unknown-none-elf
          rustup target add riscv64imac-unknown-none-elf riscv64gc-unknown-none-elf

      - name: Cache test runner's binary
        uses: actions/cache@v2
        with:
          path: ./target/debug
          key: ${{ runner.os }}-ci-runner-${{ hashFiles('rust-toolchain', 'src/r3_test_runner/**', 'src/r3_test_suite/**') }}

      - name: Test
        run: |
          cargo run --package r3_test_runner -- --target ${{ matrix.runner_target }} ${{ matrix.runner_args }} --log-level debug
