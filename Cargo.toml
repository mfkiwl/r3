[workspace]
members = [
    "examples/basic",
    "examples/basic_gr_peach",
    "examples/basic_nucleo_f401re",
    "examples/basic_rp_pico",
    "examples/basic_wio_terminal",
    "examples/common",
    "examples/smp_rp_pico",
    "src/arm_semihosting",
    "src/r3",
    "src/r3_core",
    "src/r3_kernel",
    "src/r3_port_arm",
    "src/r3_port_arm_m",
    "src/r3_port_arm_m_test_driver",
    "src/r3_port_arm_test_driver",
    "src/r3_port_riscv",
    "src/r3_port_riscv_test_driver",
    "src/r3_port_std",
    "src/r3_portkit",
    "src/r3_support_rp2040",
    "src/r3_support_rza1",
    "src/r3_test_runner",
    "src/r3_test_suite",
]
resolver = "2"

[patch.crates-io.riscv]
# We need to enable `riscv/inline-asm` to work around
# <https://github.com/rust-embedded/riscv/issues/69>. However, some external
# crates depend on `riscv` 0.5.x, which uses the old form of `asm!` with the
# LLVM syntax, which isn't supported by the current compiler anymore. Therefore,
# we have to patch `riscv` 0.5.x with the version that uses the form of inline
# assembler supported by the current compiler.
git = "https://github.com/r3-os/rust-riscv.git"
branch = "refresh/0.5"

[patch.crates-io.riscv-rt]
# FIXME: This is a work-around for
# <https://github.com/rust-embedded/riscv/issues/69>. The upstream version of
# `riscv-rt` includes a precompiled object file, which may be rejected by the
# linker because of a floating-point ABI mismatch. This patched version replaces
# the precompiled object file with naked functions, which will always be
# complied with the expected floating-point ABI.
git = "https://github.com/r3-os/rust-riscv-rt.git"
branch = "refresh/0.8"
version = "0.6.2"

[profile.release]
debug = true
