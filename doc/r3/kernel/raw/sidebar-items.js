window.SIDEBAR_ITEMS = {"enum":[["MutexProtocol","Specifies the locking protocol to be followed by a mutex."],["MutexProtocolKind","Indicates a variant of [`MutexProtocol`][] supported by a kernel."],["QueueOrder","Specifies the sorting order of a wait queue."],["QueueOrderKind","Indicates a variant of [`QueueOrder`][] supported by a kernel."]],"struct":[["EventGroupWaitFlags","Options for `EventGroup::wait`."]],"trait":[["Id","A group of traits that must be implemented by kernel object ID types, including [`KernelBase::RawTaskId`]."],["KernelAdjustTime","Provides the `adjust_time` method."],["KernelBase","Provides access to the minimal API exposed by a kernel."],["KernelBoostPriority","Provides the `boost_priority` method."],["KernelEventGroup","Provides access to the event group API exposed by a kernel."],["KernelInterruptLine","Provides access to the interrupt line API exposed by a kernel."],["KernelMutex","Provides access to the mutex API exposed by a kernel."],["KernelSemaphore","Provides access to the semaphore API exposed by a kernel."],["KernelTaskSetPriority","Provides the `task_set_priority` method."],["KernelTime","Provides the `time` method."],["KernelTimer","Provides access to the timer API exposed by a kernel."]],"type":[["EventGroupBits","Unsigned integer type backing event groups."],["InterruptHandlerFn","A combined second-level interrupt handler."],["InterruptNum","Numeric value used to identify interrupt lines."],["InterruptPriority","Priority value for an interrupt line."],["SemaphoreValue","Unsigned integer type representing the number of permits held by a semaphore."]]};