window.SIDEBAR_ITEMS = {"enum":[["ActivateTaskError","Error type for `Task::activate`."],["AdjustTimeError","Error type for `Kernel::adjust_time`."],["BoostPriorityError","Error type for `Kernel::boost_priority` and `Kernel::unboost_priority`."],["ClearInterruptLineError","Error type for `InterruptLine::clear`."],["CpuLockError","Error type for `Kernel::acquire_cpu_lock` and `Kernel::release_cpu_lock`."],["DrainSemaphoreError","Error type for `Semaphore::drain`."],["EnableInterruptLineError","Error type for `InterruptLine::enable` and `InterruptLine::disable`."],["ExitTaskError","Error type for `Kernel::exit_task`."],["GetCurrentTaskError","Error type for `LocalTask::current`."],["GetEventGroupError","Error type for `EventGroup::get`."],["GetSemaphoreError","Error type for `Semaphore::get`."],["GetTaskPriorityError","Error type for `Task::priority`."],["InterruptTaskError","Error type for `Task::interrupt`."],["LockMutexError","Error type for `Mutex::lock`."],["LockMutexTimeoutError","Error type for `Mutex::lock_timeout`."],["MarkConsistentMutexError","Error type for `Mutex::mark_consistent`."],["MutexProtocol","Specifies the locking protocol to be followed by a mutex."],["ParkError","Error type for `Kernel::park`."],["ParkTimeoutError","Error type for `Kernel::park_timeout`."],["PendInterruptLineError","Error type for `InterruptLine::pend`."],["PollEventGroupError","Error type for `EventGroup::poll`."],["PollSemaphoreError","Error type for `Semaphore::poll_one`."],["QueryInterruptLineError","Error type for `InterruptLine::is_pending`."],["QueryMutexError","Error type for `Mutex::is_locked`."],["QueueOrder","Specifies the sorting order of a wait queue."],["ResultCode","All result codes (including the one indicating success) that a kernel function can return."],["SetInterruptLinePriorityError","Error type for `InterruptLine::set_priority` and `InterruptLine::set_priority_unchecked`."],["SetTaskPriorityError","Error type for `Task::set_priority`."],["SetTimerDelayError","Error type for `Timer::set_delay`."],["SetTimerPeriodError","Error type for `Timer::set_period`."],["SignalSemaphoreError","Error type for `Semaphore::signal`."],["SleepError","Error type for `Kernel::sleep`."],["StartTimerError","Error type for `Timer::start`."],["StopTimerError","Error type for `Timer::stop`."],["TimeError","Error type for `Kernel::time` and `Kernel::set_time`."],["TryLockMutexError","Error type for `Mutex::try_lock`."],["UnlockMutexError","Error type for `Mutex::unlock`."],["UnparkError","Error type for `Task::unpark`."],["UnparkExactError","Error type for `Task::unpark_exact`."],["UpdateEventGroupError","Error type for `EventGroup::set` and `EventGroup::clear`."],["WaitError","Error type for wait operations such as `EventGroup::wait`."],["WaitEventGroupError","Error type for `EventGroup::wait`."],["WaitEventGroupTimeoutError","Error type for `EventGroup::wait_timeout`."],["WaitSemaphoreError","Error type for `Semaphore::wait_one`."],["WaitSemaphoreTimeoutError","Error type for `Semaphore::wait_one_timeout`."],["WaitTimeoutError","Error type for wait operations with timeout such as `EventGroup::wait_timeout`."]],"mod":[["cfg","Kernel configuration"],["event_group","Event groups"],["hook","Hooks"],["hunk","Hunks"],["interrupt","Interrupt lines and handlers"],["mutex","Mutexes"],["prelude","The prelude module. This module re-exports `Kernel` and other extension traits with impl-only-use (`use ... as _`, RFC2166)."],["raw","The low-level kernel interface to be implemented by a kernel implementor."],["raw_cfg","The low-level kernel static configuration interface to be implemented by a kernel implementor."],["semaphore","Semaphores"],["task","Tasks"],["timer","Timers"],["traits","Re-exports all traits defined under this module for convenience."]],"struct":[["Cfg","Wraps a [`raw_cfg::CfgBase`] to provide higher-level services."],["EventGroup","Represents a single owned event group in a system."],["EventGroupRef","Represents a single borrowed event group in a system."],["EventGroupWaitFlags","Options for `EventGroup::wait`."],["Hunk","Represents a single hunk in a system."],["InterruptLine","Refers to an interrupt line in a system."],["LocalTask","A non-`Send`, `'static` task reference. The lack of `Send`-ness constrains its lifetime to the owning task and thus allows it to represent a current task safely."],["Mutex","Represents a single mutex in a system."],["MutexRef","Represents a single borrowed mutex in a system."],["Semaphore","Represents a single semaphore in a system."],["SemaphoreRef","Represents a single borrowed semaphore in a system."],["StartupHook","Represents a registered startup hook in a system."],["StaticInterruptHandler","Represents a registered (second-level) interrupt handler in a system."],["Task","Represents a single task in a system."],["TaskRef","Represents a single borrowed task in a system."],["Timer","Represents a single timer in a system."],["TimerRef","Represents a single borrowed timer in a system."]],"trait":[["Id","A group of traits that must be implemented by kernel object ID types, including [`KernelBase::RawTaskId`]."],["Kernel","Provides access to the global functionalities of a kernel."]],"type":[["EventGroupBits","Unsigned integer type backing event groups."],["InterruptNum","Numeric value used to identify interrupt lines."],["InterruptPriority","Priority value for an interrupt line."],["SemaphoreValue","Unsigned integer type representing the number of permits held by a semaphore."],["StaticEventGroup","A static handle type: [`EventGroupRef`][]`<'static, System>`"],["StaticMutex","A static handle type: [`MutexRef`][]`<'static, System>`"],["StaticSemaphore","A static handle type: [`SemaphoreRef`][]`<'static, System>`"],["StaticTask","A static handle type: [`TaskRef`][]`<'static, System>`"],["StaticTimer","A static handle type: [`TimerRef`][]`<'static, System>`"]]};