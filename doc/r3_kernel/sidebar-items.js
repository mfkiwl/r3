window.SIDEBAR_ITEMS = {"constant":[["TIME_HARD_HEADROOM","The extent of how overdue the firing of `timer_tick` can be without breaking the kernel timing algorithm."],["TIME_USER_HEADROOM","The extent of how overdue a timed event can be made or how far a timed event can be delayed past `Duration::MAX` by a call to `raw_adjust_time`."]],"macro":[["build","Attach a configuration function to a kernel trait type by implementing `KernelCfg2`."]],"mod":[["_changelog_","Changelog"],["cfg","Static configuration mechanism for the kernel"],["utils","Utility"]],"struct":[["KernelDebugPrinter","The object returned by `<`[`System`]`as``KernelBase``>::debug`. Implements [`fmt::Debug`]."],["StackHunk","[`Hunk`] for a task stack."],["State","Global kernel state."],["System","Wraps a provided trait type `Traits` to instantiate a kernel. This type implements the traits from [`r3_core::kernel::raw`], making it usable as a kernel, if `Traits` implements some appropriate traits, which consequently make it implement [`KernelTraits`]."],["TaskAttr","The static properties of a task."],["TaskCb","Task control block - the state data of a task."]],"trait":[["KernelCfg1","Associates a kernel trait type with kernel-private data. Use [`build!`] to implement."],["KernelCfg2","Associates “system” types with kernel-private data. Use [`build!`] to implement."],["KernelTraits","Represents a complete kernel trait type."],["Port","Represents a particular group of traits that a port should implement."],["PortInterrupts","Implemented by a port. This trait contains items related to controlling interrupt lines."],["PortThreading","Implemented by a port. This trait contains items related to low-level operations for controlling CPU states and context switching."],["PortTimer","Implemented by a port. This trait contains items related to controlling a system timer."],["PortToKernel","Methods intended to be called by a port."]],"type":[["Cfg","The instantiation of [`r3_core::kernel::Cfg`] used by [`build!`] to configure a kernel. `CfgBuilder<...>` in this alias Implements `~const`` ``raw_cfg::CfgBase``<`[`System`]`<Traits>>` and many other `raw_cfg` traits."],["Id","Numeric value used to identify various kinds of kernel objects."],["UTicks","Unsigned integer type representing a tick count used by a port timer driver. The period of each tick is fixed at one microsecond."]]};